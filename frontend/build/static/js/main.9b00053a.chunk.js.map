{"version":3,"sources":["util/Api.js","util/ValidationError.js","components/Color.js","components/Browser.js","components/App.js","serviceWorker.js","index.js"],"names":["Api","url","validate","onSuccess","onFailure","config","axios","get","this","getRequestConfig","then","response","error","catch","data","finalConfig","post","defaultConfig","baseURL","process","REACT_APP_API_URL","defaultHeaders","headers","Object","assign","ValidationError","message","name","Error","Color","getImages","useState","showPicker","setShowPicker","currentColor","setCurrentColor","colorArray","setColorArray","selectedColorIndex","setSelectedColorIndex","ShowPallete","length","map","color","i","id","style","backgroundColor","border","onClick","index","onChange","hex","disableAlpha","Browser","state","setState","isLoading","setIsLoading","useEffect","console","log","className","ShowArtworks","image","maxWidth","Math","max","width","title","author","Date","date","toLocaleDateString","whiteSpace","trans","colorCount","height","src","alt","type","img","document","getElementById","div","clientWidth","zoomIn","naturalWidth","zoomOut","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b00053a.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass Api {\n\n    static get(url, validate, onSuccess, onFailure, config = {}) {\n        axios.get(url, this.getRequestConfig(config))\n            .then(function (response) {\n                try {\n                    validate(response);\n                    onSuccess(response);\n                } catch (error) {\n                    onFailure(error);\n                }\n            })\n            .catch(function (error) {\n                onFailure(error);\n            })\n            .then(function () {\n                // always executed\n            });\n    }\n    \n    static post(url, validate, onSuccess, onFailure, config = {}, data = null) {\n        const finalConfig = this.getRequestConfig(config);\n        axios.post(url, data ? data : finalConfig.data, finalConfig)\n            .then(function (response) {\n                try {\n                    validate(response);\n                    onSuccess(response);\n                } catch (error) {\n                    onFailure(error);\n                }\n            })\n            .catch(function (error) {\n                onFailure(error);\n            })\n            .then(function () {\n                // always executed\n            });\n    }\n\n    static getRequestConfig(config = {}) {\n        let defaultConfig = {\n            baseURL: process.env.REACT_APP_API_URL\n        };\n    \n        let defaultHeaders = {};\n    \n        defaultConfig.headers = defaultHeaders;\n    \n        const finalConfig = Object.assign(defaultConfig, config);\n        return finalConfig;\n    }\n}\n\nexport default Api;\n","class ValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"ValidationError\";\n    }\n}\n\nexport default ValidationError;\n","import React, { useState } from 'react';\nimport { ChromePicker } from 'react-color';\nimport '../CSS/color.css';\n\nexport default function Color({getImages}){\n    const [showPicker, setShowPicker] = useState(false);\n    const [currentColor, setCurrentColor] = useState();\n    const [colorArray, setColorArray] = useState([]);\n    const [selectedColorIndex, setSelectedColorIndex] = useState();    \n\n    function handleClick(){\n        setColorArray([...colorArray, '#FFFFFF'])\n        setCurrentColor('#FFFFFF');\n        setSelectedColorIndex(colorArray.length);\n        setShowPicker(true);\n    };\n\n    function handleChange(color){\n        setCurrentColor(color.hex);\n        colorArray[selectedColorIndex] = currentColor;\n    };\n\n    function handleClose(){\n        setShowPicker(false);\n        setSelectedColorIndex();\n    };\n\n    function adjustColor(index){\n        setSelectedColorIndex(index);\n        setCurrentColor(colorArray[index]);\n        setShowPicker(!showPicker);\n    }\n\n    function ShowPallete() {\n        if(colorArray.length){\n            return colorArray.map((color, i) =>\n                <div id=\"swatch\" style={{\n                        backgroundColor: color, \n                        border: i===selectedColorIndex?'5px solid rgba(255,255,255,1)':'5px solid rgba(255,255,255,0)'\n                    }} onClick={()=>adjustColor(i)} key={i}>\n                    <div id=\"color\"></div>\n                </div>\n            );\n        }\n        return null\n    }\n    \n    return(\n        <div id={\"colorsearch\"}>\n            <h2>Color</h2>\n            <div id={\"palette\"}>\n                <ShowPallete />\n                <button id=\"add-color-button\" onClick={handleClick}>+</button> \n            </div>\n\n            {showPicker ?\n                <div id=\"popover\">\n                    <div id=\"cover\" onClick={handleClose}/>\n                    <ChromePicker color={currentColor} onChange={handleChange} disableAlpha={true}/>\n                </div>\n                :null\n            }\n            <button id=\"search-button\" onClick={()=>getImages(colorArray)}>search</button>\n        </div>\n    )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport Api from '../util/Api';\nimport ValidationError from '../util/ValidationError';\nimport Color from './Color';\nimport '../CSS/browser.css';\n\nexport default function Browser() {\n    const [state, setState] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(()=>{\n        //getImages()\n    },[])\n\n    return (\n        <>\n            <Color getImages={getImages}/>\n            \n            <div className=\"flex-container\">\n                <ShowArtworks/>  \n            </div>\n        </>\n    )\n\n    function ShowArtworks() {\n        if (isLoading) {\n            return <h3>Loading...</h3>\n        } \n        return state.map((image, i) =>\n            <div key={i} id={\"div\"+i} className=\"pixel-result\" style={{maxWidth: Math.max(300, image.width) }}>\n                <table>\n                    <tbody>\n                    <tr><td>Title:</td><td><strong>{image.title}</strong></td></tr>\n                    <tr><td>Author:</td><td><strong>{image.author}</strong></td></tr>\n                    <tr><td>Date:</td><td>{new Date(image.date).toLocaleDateString()}</td></tr>\n                    <tr><td style={{whiteSpace: \"nowrap\"}}>Color count:</td><td>{image.trans ? image.colorCount + 1: image.colorCount}</td></tr>\n                    <tr><td>Size:</td><td>{image.width} x {image.height}</td></tr>\n                    </tbody>\n                </table>\n                <div className=\"artwork\">\n                    <img src={image.url} alt={image.title} id={i}></img>\n                </div>\n                <div className=\"zoom-buttons\">\n                    <button type=\"button\" onClick={()=>zoomIn(i)}>+</button>\n                    <button type=\"button\" onClick={()=>zoomOut(i)}>-</button>\n                </div>\n            </div> \n        );\n    }\n\n    function getImages(colorArray){\n        console.log(colorArray)\n        function validator(response){\n\n        }\n\n        function onSucces(response){\n            console.log(response)\n            setState(response.data);\n            setIsLoading(false);\n        }\n\n        function onFailure(){\n            throw new ValidationError(\"Failed\");\n        }\n\n        Api.get('/api', validator, onSucces, onFailure, {headers:{'colorarray': colorArray}})\n    }\n\n    function zoomIn(id) {\n        var img = document.getElementById(id);\n        var div = document.getElementById(\"div\" + id);\n        var width = img.clientWidth;\n        var divWidth = div.clientWidth;\n        if (divWidth < width * 2) div.style.maxWidth = (width * 2) + \"px\";\n        img.style.width = (width * 2) + \"px\";\n        console.log(\"zooming\");\n    }\n\n    function zoomOut(id) {\n        var img = document.getElementById(id);\n        var width = img.clientWidth;\n        if (width === img.naturalWidth) return false;\n        img.style.width = (width / 2) + \"px\";\n    }\n\n}","import React from 'react';\nimport Browser from '../components/Browser';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Browser}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}