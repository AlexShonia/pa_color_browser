{"version":3,"sources":["util/Api.js","util/ValidationError.js","components/Browser.js","components/App.js","serviceWorker.js","index.js"],"names":["Api","url","validate","onSuccess","onFailure","config","axios","get","this","getRequestConfig","then","response","error","catch","data","finalConfig","post","defaultConfig","baseURL","process","REACT_APP_API_URL","defaultHeaders","headers","Object","assign","ValidationError","message","name","Error","Browser","useState","state","setState","isLoading","setIsLoading","useEffect","validator","onSucces","getImages","color","ShowArtworks","map","image","i","title","src","alt","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"0NAuDeA,E,iGAnDAC,EAAKC,EAAUC,EAAWC,GAAyB,IAAdC,EAAa,uDAAJ,GACrDC,IAAMC,IAAIN,EAAKO,KAAKC,iBAAiBJ,IAChCK,MAAK,SAAUC,GACZ,IACIT,EAASS,GACTR,EAAUQ,GACZ,MAAOC,GACLR,EAAUQ,OAGjBC,OAAM,SAAUD,GACbR,EAAUQ,MAEbF,MAAK,iB,2BAKFT,EAAKC,EAAUC,EAAWC,GAAsC,IAA3BC,EAA0B,uDAAjB,GAAIS,EAAa,uDAAN,KAC3DC,EAAcP,KAAKC,iBAAiBJ,GAC1CC,IAAMU,KAAKf,EAAKa,GAAcC,EAAYD,KAAMC,GAC3CL,MAAK,SAAUC,GACZ,IACIT,EAASS,GACTR,EAAUQ,GACZ,MAAOC,GACLR,EAAUQ,OAGjBC,OAAM,SAAUD,GACbR,EAAUQ,MAEbF,MAAK,iB,yCAKwB,IAAdL,EAAa,uDAAJ,GACzBY,EAAgB,CAChBC,QAASC,mIAAYC,mBAGrBC,EAAiB,GAErBJ,EAAcK,QAAUD,EAExB,IAAMN,EAAcQ,OAAOC,OAAOP,EAAeZ,GACjD,OAAOU,M,gCC5CAU,E,kDANX,WAAYC,GAAU,IAAD,8BACjB,cAAMA,IACDC,KAAO,kBAFK,E,sBADKC,Q,SCKf,SAASC,IAAW,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,OAEIF,oBAAS,GAFb,mBAEvBG,EAFuB,KAEZC,EAFY,KAQ9B,OAJAC,qBAAU,YAuBV,WACI,SAASC,EAAUzB,GACf,IAAIA,EAASG,KACT,MAAM,IAAIW,EAAgB,WAIlC,SAASY,EAAS1B,GACdqB,EAASrB,EAASG,MAClBoB,GAAa,GAGjB,SAAS9B,IACL,MAAM,IAAIqB,EAAgB,UAG9BzB,EAAIO,IAAI,cAAe6B,EAAWC,EAAUjC,GAtC5CkC,KACF,IAGE,qCACI,cAAC,eAAD,CAAcC,MAAO,YACrB,cAACC,EAAD,OAIR,SAASA,IACL,OAAIP,EACO,4CAEJF,EAAMU,KAAI,SAACC,EAAOC,GAAR,OACb,gCACI,6BAAKD,EAAME,QACX,qBAAKC,IAAKH,EAAMzC,IAAK6C,IAAKJ,EAAME,UAF1BD,O,oBCXPI,MAVf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrB,SCIrBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdnD,OAAM,SAAAD,GACLqD,QAAQrD,MAAMA,EAAMc,c","file":"static/js/main.7984decd.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass Api {\n\n    static get(url, validate, onSuccess, onFailure, config = {}) {\n        axios.get(url, this.getRequestConfig(config))\n            .then(function (response) {\n                try {\n                    validate(response);\n                    onSuccess(response);\n                } catch (error) {\n                    onFailure(error);\n                }\n            })\n            .catch(function (error) {\n                onFailure(error);\n            })\n            .then(function () {\n                // always executed\n            });\n    }\n    \n    static post(url, validate, onSuccess, onFailure, config = {}, data = null) {\n        const finalConfig = this.getRequestConfig(config);\n        axios.post(url, data ? data : finalConfig.data, finalConfig)\n            .then(function (response) {\n                try {\n                    validate(response);\n                    onSuccess(response);\n                } catch (error) {\n                    onFailure(error);\n                }\n            })\n            .catch(function (error) {\n                onFailure(error);\n            })\n            .then(function () {\n                // always executed\n            });\n    }\n\n    static getRequestConfig(config = {}) {\n        let defaultConfig = {\n            baseURL: process.env.REACT_APP_API_URL\n        };\n    \n        let defaultHeaders = {};\n    \n        defaultConfig.headers = defaultHeaders;\n    \n        const finalConfig = Object.assign(defaultConfig, config);\n        return finalConfig;\n    }\n}\n\nexport default Api;\n","class ValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"ValidationError\";\n    }\n}\n\nexport default ValidationError;\n","import React, { useEffect, useState } from 'react';\nimport Api from '../util/Api';\nimport ValidationError from '../util/ValidationError';\nimport { ChromePicker } from 'react-color';\n\nexport default function Browser() {\n    const [state, setState] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(()=>{\n        getImages()\n    },[])\n\n    return (\n        <>\n            <ChromePicker color={'#ffffff'}/>\n            <ShowArtworks/>  \n        </>\n    )\n\n    function ShowArtworks() {\n        if (isLoading) {\n            return <h1>Loading...</h1>\n        } \n        return state.map((image, i) =>\n            <div key={i}>\n                <h1>{image.title}</h1>\n                <img src={image.url} alt={image.title}></img>\n            </div> \n        );\n    }\n\n    function getImages(){\n        function validator(response){\n            if(!response.data){\n                throw new ValidationError(\"No data\");\n            }\n        }\n\n        function onSucces(response){\n            setState(response.data);\n            setIsLoading(false);\n        }\n\n        function onFailure(){\n            throw new ValidationError(\"Failed\");\n        }\n\n        Api.get('/api/yellow', validator, onSucces, onFailure)\n    }\n}","import React from 'react';\nimport Browser from '../components/Browser';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Browser}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}