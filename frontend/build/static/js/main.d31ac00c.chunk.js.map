{"version":3,"sources":["util/Api.js","util/ValidationError.js","components/Color.js","components/SearchFields.js","components/Image.js","components/Browser.js","components/DetailView.js","components/App.js","serviceWorker.js","index.js"],"names":["Api","url","validate","onSuccess","onFailure","config","axios","get","this","getRequestConfig","then","response","error","catch","data","finalConfig","post","defaultConfig","baseURL","process","REACT_APP_API_URL","defaultHeaders","headers","Object","assign","ValidationError","message","name","Error","Color","setColorPalette","useState","showPicker","setShowPicker","currentColor","setCurrentColor","colorArray","setColorArray","selectedColorIndex","setSelectedColorIndex","ShowPallete","length","map","color","i","id","style","backgroundColor","border","onClick","index","className","onChange","hex","disableAlpha","SearchFields","setTolerance","setKeyword","setAuthor","keywordValue","setKeywordValue","authorValue","setAuthorValue","sliderProps","min","max","defaultState","label","state","setSlide","type","step","value","e","target","useSlider","useEffect","for","event","Image","image","gridCell","classes","w","h","width","height","href","pjId","src","alt","title","Browser","setState","isLoading","setIsLoading","colorPalette","tolerance","keyword","author","validator","onSucces","console","log","getImages","ShowArtworks","DetailView","setImage","selectedColors","setSelectedColors","useParams","ShowDetail","Details","Palette","colors","includes","filter","text","Math","round","percent","Tags","tags","tag","tagLinks","entries","push","img","document","getElementById","clientWidth","naturalWidth","zoomOut","zoomIn","desc","alert","allIndexes","selectAll","getImage","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d31ac00c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nclass Api {\r\n\r\n    static get(url, validate, onSuccess, onFailure, config = {}) {\r\n        axios.get(url, this.getRequestConfig(config))\r\n            .then(function (response) {\r\n                try {\r\n                    validate(response);\r\n                    onSuccess(response);\r\n                } catch (error) {\r\n                    onFailure(error);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                onFailure(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    \r\n    static post(url, validate, onSuccess, onFailure, config = {}, data = null) {\r\n        const finalConfig = this.getRequestConfig(config);\r\n        axios.post(url, data ? data : finalConfig.data, finalConfig)\r\n            .then(function (response) {\r\n                try {\r\n                    validate(response);\r\n                    onSuccess(response);\r\n                } catch (error) {\r\n                    onFailure(error);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                onFailure(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n\r\n    static getRequestConfig(config = {}) {\r\n        let defaultConfig = {\r\n            baseURL: process.env.REACT_APP_API_URL\r\n        };\r\n    \r\n        let defaultHeaders = {};\r\n    \r\n        defaultConfig.headers = defaultHeaders;\r\n    \r\n        const finalConfig = Object.assign(defaultConfig, config);\r\n        return finalConfig;\r\n    }\r\n}\r\n\r\nexport default Api;\r\n","class ValidationError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"ValidationError\";\r\n    }\r\n}\r\n\r\nexport default ValidationError;\r\n","import React, { useState } from 'react';\r\nimport { ChromePicker } from 'react-color';\r\nimport '../CSS/color.css';\r\n\r\nexport default function Color({setColorPalette}){\r\n    const [showPicker, setShowPicker] = useState(false);\r\n    const [currentColor, setCurrentColor] = useState();\r\n    const [colorArray, setColorArray] = useState([]);\r\n    const [selectedColorIndex, setSelectedColorIndex] = useState();    \r\n\r\n    function handleClick(){\r\n        setColorArray([...colorArray, '#FFFFFF'])\r\n        setCurrentColor('#FFFFFF');\r\n        setSelectedColorIndex(colorArray.length);\r\n        setShowPicker(true);\r\n    };\r\n\r\n    function handleChange(color){\r\n        setCurrentColor(color.hex);\r\n        colorArray[selectedColorIndex] = currentColor;\r\n    };\r\n\r\n    function handleClose(){\r\n        setShowPicker(false);\r\n        setSelectedColorIndex();\r\n        setColorPalette(colorArray);\r\n    };\r\n\r\n    function adjustColor(index){\r\n        setSelectedColorIndex(index);\r\n        setCurrentColor(colorArray[index]);\r\n        setShowPicker(!showPicker);\r\n    }\r\n\r\n    function ShowPallete() {\r\n        if(colorArray.length){\r\n            return colorArray.map((color, i) =>\r\n                <div id=\"swatch\" style={{\r\n                        backgroundColor: color, \r\n                        border: i===selectedColorIndex?'5px solid rgba(255,255,255,1)':'5px solid rgba(255,255,255,0)'\r\n                    }} onClick={()=>adjustColor(i)} key={i}>\r\n                    <div className=\"color\"></div>\r\n                </div>\r\n            );\r\n        }\r\n        return null\r\n    }\r\n\r\n    function removeAll(){\r\n        setColorArray([]);\r\n        setColorPalette([]);\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <h2>Color</h2>\r\n            <div id={\"palette\"} className=\"color-search-container\">\r\n                <ShowPallete />\r\n                <button className=\"button-large\" onClick={handleClick}>+</button>\r\n                <button className=\"button-large\" onClick={()=>removeAll()}>REMOVE ALL</button>\r\n                \r\n            </div>\r\n\r\n            {showPicker ?\r\n                <div id=\"popover\">\r\n                    <div id=\"cover\" onClick={handleClose}/>\r\n                    <ChromePicker color={currentColor} onChange={handleChange} disableAlpha={true}/>\r\n                </div>\r\n                :null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nconst useSlider = (min, max, defaultState, label, id) => {\r\n    const [state, setSlide] = useState(defaultState);\r\n    const handleChange = e => {\r\n        setSlide(e.target.value);\r\n    }\r\n  \r\n    const props = { \r\n      type: 'range',\r\n      id,\r\n      min,\r\n      max,\r\n      step: 1,\r\n      value: state,\r\n      onChange: handleChange\r\n    }\r\n    return props\r\n}\r\n\r\nexport default function SearchFields({setTolerance, setKeyword, setAuthor}){\r\n    const [keywordValue, setKeywordValue] = useState(\"\");\r\n    const [authorValue, setAuthorValue] = useState(\"\");\r\n    const sliderProps = useSlider(0, 20, 4, \"Threshold\", 'threshold');\r\n\r\n    const onKeyword = event => {\r\n        setKeywordValue(event.target.value);\r\n    };\r\n\r\n    const onAuthor = event => {\r\n        setAuthorValue(event.target.value);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setTolerance(sliderProps.value);\r\n    },[sliderProps.value])\r\n\r\n    useEffect(()=>{\r\n        setKeyword(keywordValue);\r\n    },[keywordValue])\r\n\r\n    useEffect(()=>{\r\n        setAuthor(authorValue);\r\n    },[authorValue])\r\n\r\n    return(\r\n        <div className=\"search-container\">\r\n            <div className=\"search-element\">\r\n                <label for=\"searchAll\">Color tolerance: </label>\r\n                <label>{sliderProps.value}</label>\r\n                <input {...sliderProps}/>\r\n            </div>\r\n             {/* <div className=\"search-element\">\r\n                <label for=\"title\">Search title: </label>\r\n                <input type=\"text\" id=\"title\" name=\"title\" />\r\n            </div>\r\n            <div className=\"search-element\"> \r\n                <label for=\"keyword\">Search keyword: </label>\r\n                <input type=\"text\" id=\"keyword\" name=\"keyword\" />\r\n            </div>   */}\r\n            <div className=\"search-element\">\r\n                <label for=\"searchAll\">Keyword: </label>\r\n                <input type=\"text\" id=\"searchAll\" name=\"searchAll\" onChange={onKeyword} value={keywordValue}/>\r\n            </div>\r\n            <div className=\"search-element\">\r\n                <label for=\"author\">Search author: </label>\r\n                <input type=\"text\" id=\"searchAll\" name=\"searchAll\" onChange={onAuthor} value={authorValue}/>\r\n            </div>\r\n\r\n        </div>     \r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nexport default function Image({image, i}){\r\n\r\n    const gridCell = 128;\r\n    //if images are only a tiny bit too large, they will still be cropped\r\n    const minOvershoot = 20;\r\n    const gridGap = 10;\r\n\r\n    let classes=\"art-grid\";\r\n    let w = gridCell\r\n    let h = gridCell\r\n    if (image.width > gridCell + minOvershoot){\r\n        classes += \" grid-w2\";\r\n        w = w * 2 + gridGap;\r\n    }\r\n    if (image.height > gridCell + minOvershoot){\r\n        classes += \" grid-h2\";\r\n        h = h * 2 + gridGap;\r\n    }\r\n\r\n    return(\r\n        <div key={i} className={classes}>\r\n            <a href={\"/detail/\"+ image.pjId}>\r\n            {/* Scale small images 2x, tiny images 3x */}\r\n            {image.width <= gridCell/2 && image.height <= gridCell/2\r\n                ? image.width <= gridCell/3 && image.height <= gridCell/3\r\n                    ?<span><span className=\"helper\"></span><img src={image.url} alt={image.title} id={i} width={image.width * 3} height={image.height * 3}></img></span>\r\n                    :<span><span className=\"helper\"></span><img src={image.url} alt={image.title} id={i} width={image.width * 2} height={image.height * 2}></img></span>\r\n                : <img src={image.url} alt={image.title} id={i} className=\"fit\" width={w} height={h}></img>\r\n            }\r\n            </a>\r\n\r\n        </div> \r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport Api from '../util/Api';\r\nimport ValidationError from '../util/ValidationError';\r\nimport Color from './Color';\r\nimport SearchFields from './SearchFields';\r\nimport Image from './Image';\r\nimport '../CSS/browser.css';\r\n\r\nexport default function Browser() {\r\n    const [state, setState] = useState([]);\r\n    //0 = results, 1 = loading, 2 =  no images, 3 = app start\r\n    const [isLoading, setIsLoading] = useState(4);\r\n    const [colorPalette, setColorPalette] = useState();\r\n    const [tolerance, setTolerance] = useState();\r\n    const [keyword, setKeyword] = useState();\r\n    const [author, setAuthor] = useState();\r\n\r\n    return (\r\n        <>\r\n            <div className=\"top-bar\">\r\n                <Color setColorPalette={setColorPalette}/>\r\n                <SearchFields setTolerance={setTolerance} setKeyword={setKeyword} setAuthor={setAuthor}/>\r\n                <button id=\"search-button\" onClick={()=>getImages()}>search</button>\r\n            </div>\r\n            \r\n            <div className=\"grid-container\">\r\n                <ShowArtworks/>  \r\n            </div>\r\n        </>\r\n    )\r\n\r\n    function ShowArtworks() {\r\n        if (isLoading === 1) {\r\n            return <h3>Loading...</h3>\r\n        } \r\n        if (isLoading === 2) {\r\n            return <span><h3>No results. </h3> <p> Consider increasing the color tolerance, or removing colors</p></span>\r\n        } \r\n        if (isLoading === 3) {\r\n            return <h3>Enter search query above </h3> \r\n        } \r\n        return state.map((image, i) =>\r\n            <Image image={image} i={i}/>\r\n        );\r\n    }\r\n\r\n    function getImages(){\r\n        function validator(response){}\r\n\r\n        function onSucces(response){\r\n            console.log(response.data);\r\n            if (response.data.length > 0){\r\n                setState(response.data);\r\n                setIsLoading(0);\r\n            } else {\r\n                setIsLoading(2);\r\n            }\r\n        }\r\n\r\n        function onFailure(){\r\n            throw new ValidationError(\"Failed\");\r\n        }\r\n\r\n        setIsLoading(1);\r\n        Api.get('/api', validator, onSucces, onFailure, {headers:{'colorarray': colorPalette, 'tolerance': tolerance, 'keyword': keyword, 'author': author}})\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport '../CSS/detailView.css';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport { useParams } from 'react-router-dom';\r\nimport Api from '../util/Api';\r\nimport ValidationError from '../util/ValidationError';\r\n\r\nexport default function DetailView(){\r\n    const [image, setImage] = useState();\r\n    const [selectedColors, setSelectedColors] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    let { id } = useParams();\r\n  \r\n    useEffect(()=>{\r\n        getImage(id)\r\n    },[])\r\n\r\n    function ShowDetail() {\r\n        if (isLoading) {\r\n            return <h3>Loading...</h3>\r\n        } \r\n        return <Details/>\r\n    }\r\n  \r\n    function selectColor(index){\r\n        if (selectedColors.includes(index)) {\r\n            setSelectedColors(selectedColors.filter(function(e) { return e !== index; }))\r\n        } else {\r\n            setSelectedColors([...selectedColors, index]);\r\n        }\r\n        console.log(selectedColors);\r\n    }\r\n    function selectAll(){\r\n        const allIndexes = []\r\n        for (let i = 0; i < image.colors.length; i++) {\r\n            allIndexes.push(i);\r\n        }\r\n        setSelectedColors(allIndexes);\r\n    }\r\n    function deselectAll(){\r\n        setSelectedColors([]);\r\n    }\r\n\r\n    function Palette(){\r\n        return image.colors.map((color, i) =>\r\n            <div key={i} id={i} className={selectedColors.includes(i) ? \"color-tile select\" : \"color-tile deselect\"} style={{backgroundColor: color.hex}}>         \r\n                <div className=\"hover-visible\" onClick={()=>selectColor(i)}>\r\n                    <CopyToClipboard text={color.hex}>\r\n                        <span className={(Math.round(color.percent)<10)? \"add-space\" : \"\"}>\r\n                            {Math.round(color.percent)}% {color.hex} \r\n                        </span> \r\n                    </CopyToClipboard>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function Tags(){\r\n        return(\r\n            <p>Tags: {image.tags.map((tag, i) =>\r\n                    <> \r\n                        <a key={i} href='#'>{tag}</a>\r\n                        {i < image.tags.length - 1 && <>, </>}\r\n                    </>\r\n                )}\r\n            </p>\r\n        )\r\n    }\r\n  \r\n    function Details(){\r\n        const tagLinks = [];\r\n\r\n        for (const [i, tag] of image.tags.entries()) {\r\n            tagLinks.push(<a key={i} href='#'>{tag}</a>)\r\n        }\r\n        return(\r\n            <div className=\"detail-view\">\r\n                <div className =\"return-bar\">\r\n                    <a href=\"../\">return to search</a>\r\n                </div>\r\n                <div className=\"detail-container\">\r\n                    <div className=\"image-large\">\r\n                    <img src={image.url} alt={image.title} id={image.pjId} ></img>\r\n                    <div className=\"zoom-detail\">\r\n                        <button type=\"button\" onClick={()=>zoomOut(image.pjId)}>-</button>\r\n                        <button type=\"button\" onClick={()=>zoomIn(image.pjId)}>+</button>\r\n                        <br/>\r\n                        zoom\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"image-metadata\">\r\n                    <div className=\"meta-text\">\r\n                        <h2>{image.title}</h2>\r\n                        <h3>Created by <a href=\"#\">{image.author}</a></h3>\r\n                        <p>{image.desc}</p>\r\n                        <Tags/>\r\n                    </div>\r\n                    <div className=\"color-wrapper\">\r\n                        <Palette/>\r\n                    </div>\r\n                        \r\n                        <button onClick={()=>alert(\"Sorry, this feature doesn't work yet :(\")}>Search with selected colors</button>\r\n                        <span className=\"select-all\">\r\n                            <a href=\"#\" onClick={()=>selectAll()}>select all</a>, <a href=\"#\" onClick={()=>deselectAll()}>deselect all</a>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"related-art\">\r\n                    RELATED ARTWORKS GO HERE\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n\r\n    function zoomIn(id) {\r\n        var img = document.getElementById(id);\r\n        var width = img.clientWidth;\r\n        img.style.width = (width * 2) + \"px\";\r\n    }\r\n\r\n    function zoomOut(id) {\r\n        var img = document.getElementById(id);\r\n        var width = img.clientWidth;\r\n        if (width === img.naturalWidth) return false;\r\n        img.style.width = (width / 2) + \"px\";\r\n    }\r\n\r\n    // main render\r\n    return(\r\n        <ShowDetail/>\r\n    )\r\n\r\n    function getImage(id){\r\n        function validator(response){\r\n\r\n        }\r\n\r\n        function onSucces(response){\r\n            setImage(response.data);\r\n            setIsLoading(false);\r\n        }\r\n\r\n        function onFailure(){\r\n            throw new ValidationError(\"Failed\");\r\n        }\r\n\r\n        Api.get(`/api/${id}`, validator, onSucces, onFailure)\r\n    }\r\n}","import React from 'react';\nimport Browser from '../components/Browser';\nimport DetailView from '../components/DetailView';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Browser}/>\n        <Route path=\"/detail/:id\" exact component={DetailView}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}